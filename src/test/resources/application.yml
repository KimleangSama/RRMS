server:
  port: 10000

servlet:
  multipart:
    max-file-size: 5MB
    max-request-size: 5MB

spring:
  main:
    allow-bean-definition-overriding: true
  application:
    name: RRMS
  cache:
    type: redis
    redis:
      time-to-live: 60000
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        show_sql: false
  datasource:
    driver-class-name: ${DRIVER_CLASS_NAME:org.postgresql.Driver}
    url: ${DATASOURCE_URL:jdbc:postgresql://localhost:5432/postgres}
    username: ${DATASOURCE_USERNAME:postgres}
    password: ${DATASOURCE_PASSWORD:postgres}
    hikari:
      schema: public
  flyway:
    enabled: true
    locations: classpath:db/migration/structure, classpath:db/migration/data
    validate-on-migrate: true
    default-schema: public
    url: ${DATASOURCE_URL:jdbc:postgresql://localhost:5432/postgres}
    user: ${DATASOURCE_USERNAME:postgres}
    password: ${DATASOURCE_PASSWORD:postgres}
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      username: ${REDIS_USERNAME:redis}
      password: ${REDIS_PASSWORD:redis}
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:rabbitmq}
    password: ${RABBITMQ_PASSWORD:rabbitmq}

  security:
    oauth2:
      client:
        registration:
          google:
            clientId: "clientId"
            clientSecret: "clientSecret"
            redirectUri: "${server.port:http://localhost:10000}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
          facebook:
            clientId: "clientId"
            clientSecret: "clientSecret"
            redirectUri: "${server.port:http://localhost:10000}/oauth2/callback/{registrationId}"
            scope:
              - email
              - public_profile
        provider:
          facebook:
            authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
            tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
            userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)

rsa:
  private-key:
    classpath:certs/private.pem
  public-key:
    classpath:certs/public.pem

token:
  domain: ${TOKEN_DOMAIN:https://rrms.kkimleang.com}
  accessTokenExpiresHours: 336
  refreshTokenExpiresHours: 720
  issuer: jwt_issuer
cors:
  allowedOrigins: http://localhost:3000, http://localhost:4200, http://localhost:10000, https://rrms.kkimleang.com
oauth:
  # After successfully authenticating with the OAuth2 Provider,
  # we'll be generating an auth token for the user and sending the token to the
  # redirectUri mentioned by the client in the /oauth2/authorize request.
  # We're not using cookies because they won't work well in mobile clients.
  authorizedRedirectUris:
    - http://localhost:3000/oauth2/redirect
    - http://localhost:4200/oauth2/redirect
    - http://localhost:10000/oauth2/redirect
    - https://rrms.kkimleang.com/oauth2/redirect
rabbitmq:
  queue:
    email:
      name: ${RABBITMQ_EMAIL_QUEUE:email_queue}
  exchange:
    email:
      name: ${RABBITMQ_EMAIL_EXCHANGE:email_exchange}
  binding:
    email:
      name: ${RABBITMQ_EMAIL_BINDING:email_binding}

loki:
  url: ${LOKI_URL:http://localhost:3100/loki/api/v1/push}